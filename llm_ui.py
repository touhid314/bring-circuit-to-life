'''
this module is to act as a language interface between the user and the program
'''

import time
from llm.llm_inference import get_llm_response

def process_prompt(prompt:str, model_path:str, circuit, analyzer):
    '''
    arguments:
        circuit - pyspice ckt object

    given a prompt, this function, finds the response to the prompt by an LLM and perform 2 things:
    1.    execute code generated by the prompt 
    2.    return non-code things
    '''
    import re

    response = get_llm_response(prompt, model_path, circuit, show_execution_time=True)

    exec_pattern = re.compile(r'<exec>(.*?)</exec>')
    exec_commands = exec_pattern.findall(response)
    non_exec_response = exec_pattern.sub('', response).strip()

    if len(exec_commands) != 0:
        # execute analysis as per code_str
        import traceback

        for exec_cmd in exec_commands:
            try:
                print(f"executing...: {exec_cmd}")

                exec(f"def dynamic_func():\n    return {exec_cmd}")
                result = locals()['dynamic_func']()

                print(f"return of execution: {result}")
            except Exception as e:
                print(f"llm generated code execution failed. execution code: {exec_cmd}")
                print(f"> Error message: {e}")
                traceback.print_exc()
                print(f"end of error message <")
    return non_exec_response


if __name__ == "__main__":
    prompt = "what are you?"
    model_path = "llm\models\llama-2-13b-chat.ggmlv3.q5_1.bin"

    # circuit
    from PySpice.Spice.Netlist import Circuit
    circuit = Circuit('RC Circuit')
    circuit.V(1, '1', '0', 10)  # DC Voltage Source: 5V between nodes 'in' and ground
    circuit.R(1, '1', '2', 1e3)       # Resistor: 1 kOhm between 'in' and 'node1'
    circuit.C(1, '2', '0', 1e-6) # Capacitor: 1uF between 'node1' and ground

    # create an analyzer object for the circuit and the llm will perform operations by using this analyzer object
    # analyzer object is like the connecting wire between the LLM and the simulator to send instructions
    from analyse import Analyzer
    analyzer = Analyzer(circuit)

    response_text = process_prompt(prompt, model_path, circuit, analyzer)

    print(f"CIRCUIT SAYS: {response_text}")
